# -*- coding: utf-8 -*-
"""SOM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qd72k2xntZ0F49e8zn4ox9IOZcnWwTBk

#Self Organizing Map

##Install MiniSom Package
"""
"""### Importing the libraries"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""## Importing the dataset"""

dataset = pd.read_csv('Credit_Card_Applications.csv')
X = dataset.iloc[:, :-1].values 
y = dataset.iloc[:, -1].values

"""## Feature Scaling"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0,1))
X = sc.fit_transform(X)

"""##Training the SOM"""

from minisom import MiniSom
som = MiniSom(x=10, y=10, input_len= 15, sigma= 1.0, learning_rate = 0.5)
som.random_weights_init(X)
som.train_random(data = X, num_iteration = 100)

"""##Visualizing the results"""

from pylab import bone, pcolor, colorbar, plot, show
bone() #white window (containter)
pcolor(som.distance_map().T) #mean interneuron distances
colorbar()
markers = ['o', 's'] #
colors = ['r', 'g'] #green squares customer got approval, red circles didnt
for i, x in enumerate(X):
    w = som.winner(x)
    print(w)
    plot(w[0] + 0.5,
         w[1] + 0.5,
         markers[y[i]], #y labels are 0 and 1 (r and green)
         markeredgecolor = colors[y[i]],
         markerfacecolor = 'None',
         markersize = 10,
         markeredgewidth = 2)
show()

"""## Finding the frauds"""

mappings = som.win_map(X)
frauds = np.concatenate((mappings[(1,1)], mappings[(4,1)]), axis = 0)
frauds = sc.inverse_transform(frauds)

"""##Printing the Fraunch Clients"""

print('Fraud Customer IDs')
for i in frauds[:, 0]:
  print(int(i))

# Going from unsupervise to supervised deep learning
customers = dataset.iloc[:, 1:].values #CustomerID does not help
#Creating the dependent variable
is_fraud = np.zeros(len(dataset))
for i in range(len(dataset)):
   if dataset.iloc[i,0] in frauds:
      is_fraud[i] = 1